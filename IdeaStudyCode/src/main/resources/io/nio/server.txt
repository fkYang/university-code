啊飒飒撒打发手动阀手动阀撒旦发射点发生
---
title: nio
date: 2020-04-23 13:04:09
categories:
	-[JAVA]

---

# NIO

<!--more-->

NIO: 通道+缓冲区。

* 通道：打开到IO设备的连接（文件，套接字）
* 缓冲区：用于容纳数据的缓冲区

通道连接，利用缓冲区进行数据的交换

## 缓冲区

不同的数据类型有不同的缓冲区

获取缓冲区：allocate（）方法



* put：存数据到缓冲区
* get：获取缓冲区数据

缓冲区核心数据：

* capacity：缓冲区最大存储容量，一旦设定无法改变
* limit：界限，缓冲区中可操作数据大小
* position：位置，缓冲区正在操作数据的位置
  * position < limit < capacity
* mark：记录当前position的位置，reset（）可以恢复到mark的位置

flip:切换模式，读/写

```java
    public Buffer flip() {
        limit = position;
        position = 0;
        mark = -1;
        return this;
    }
```



rewind：

```java
    public Buffer rewind() {
        position = 0;
        mark = -1;
        return this;
    }
```



clear:指针初始化，内容不变

```java
    public Buffer clear() {
        position = 0;
        limit = capacity;
        mark = -1;
        return this;
    }
```

mark and reset

```java
public Buffer mark() {
        mark = position;
        return this;
    }
    
    public Buffer reset() {
        int m = mark;
        if (m < 0)
            throw new InvalidMarkException();
        position = m;
        return this;
    }
```

## 直接/非直接 缓冲区

* 非直接缓冲区：allocate()方法分配缓冲区，缓冲区在JVM的内存中
* 直接缓冲区：allocateDirect() 方法分配缓冲区，缓冲区建立在物理内存中

## 通道

java,nio.channels.Channel 接口

- FileChannel
- SocketChannel
- ServerSocketChannel
- DatagramChannel

获取通道：

* getChannel（）方法
  * 本地IO
    * FileInputStream，FileOutputStream
    * RandomAccessFile
  * 网络IO
    * Socket，serverSocket，DatagramSocket
* NIO.0对各个通道提供静态open（）
* File工具类的newByteChannel（）

### 基本的通道使用

流+通道

```java
//通道，非直接缓冲区，文件复制
	static void copyFile() throws Throwable {
		FileInputStream in = new FileInputStream(path+"1.txt");
		FileOutputStream out = new FileOutputStream(path+"2.txt");
		
		//1.get channel
		FileChannel finChannel = in.getChannel();
		FileChannel foutChannel = out.getChannel();
		
		//2.分配指定大小的缓冲区,默认初始化，写模式
		ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
		
		//3.将通道种的数据存入通道，
		while( finChannel.read(byteBuffer) != -1 ) {
			byteBuffer.flip();//切换读数据模式
			foutChannel.write(byteBuffer);//4.缓冲区数据写入通道
			byteBuffer.clear();
		}
		finChannel.close();
		foutChannel.close();
		in.close();
		out.close();
	}
```

直接缓冲区：

```java
//直接缓冲区
	static void copyFileDirect() throws Throwable {
		FileChannel fin = FileChannel.open(Paths.get(path+"1.txt"), StandardOpenOption.READ);
		FileChannel fout = FileChannel.open(Paths.get(path+"3.txt"), StandardOpenOption.WRITE,StandardOpenOption.READ,StandardOpenOption.CREATE);
		//内存映射文件
		MappedByteBuffer inmapBuffer = fin.map(MapMode.READ_ONLY, 0, fin.size());
		MappedByteBuffer outmapBuffer = fout.map(MapMode.READ_WRITE, 0, fin.size());
		
		//直接对缓冲区对数据进行读写
		byte[] dst = new byte[inmapBuffer.limit()];
		inmapBuffer.get(dst);	
		outmapBuffer.put(dst);
		
		fin.close();
		fout.close();				
	}
```

直接缓冲区+transfer

```java
	static void copyFileTransfer() throws Throwable {
		FileChannel fin = FileChannel.open(Paths.get(path+"1.txt"), StandardOpenOption.READ);
		FileChannel fout = FileChannel.open(Paths.get(path+"3.txt"), StandardOpenOption.WRITE,StandardOpenOption.READ,StandardOpenOption.CREATE);
		
	//	fin.transferTo(0, fin.size(), fout);
		fout.transferFrom(fin, 0,fin.size());
		
		fin.close();
		fout.close();
	}
```



## 分散（Scatter）与聚集（Gather）

* 分散读取：Scattering reads：将通道中的数据分散到多个缓冲区中
* 聚集写入 Gathering writing ：将多个buffer的数据聚集到Channel